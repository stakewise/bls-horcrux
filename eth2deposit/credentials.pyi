from eth2deposit.exceptions import ValidationError as ValidationError
from eth2deposit.key_handling.key_derivation.path import mnemonic_and_path_to_key as mnemonic_and_path_to_key
from eth2deposit.key_handling.keystore import Keystore as Keystore, ScryptKeystore as ScryptKeystore
from eth2deposit.settings import BaseChainSetting as BaseChainSetting, DEPOSIT_CLI_VERSION as DEPOSIT_CLI_VERSION
from eth2deposit.utils.constants import BLS_WITHDRAWAL_PREFIX as BLS_WITHDRAWAL_PREFIX, ETH2GWEI as ETH2GWEI, MAX_DEPOSIT_AMOUNT as MAX_DEPOSIT_AMOUNT, MIN_DEPOSIT_AMOUNT as MIN_DEPOSIT_AMOUNT
from eth2deposit.utils.crypto import SHA256 as SHA256
from eth2deposit.utils.ssz import DepositData as DepositData, DepositMessage as DepositMessage, compute_deposit_domain as compute_deposit_domain, compute_signing_root as compute_signing_root
from typing import Any, Dict, List

class Credential:
    signing_key_path: Any = ...
    withdrawal_sk: Any = ...
    signing_sk: Any = ...
    amount: Any = ...
    chain_setting: Any = ...
    def __init__(self, mnemonic: str, mnemonic_password: str, index: int, amount: int, chain_setting: BaseChainSetting) -> None: ...
    @property
    def signing_pk(self) -> bytes: ...
    @property
    def withdrawal_pk(self) -> bytes: ...
    @property
    def withdrawal_credentials(self) -> bytes: ...
    @property
    def deposit_message(self) -> DepositMessage: ...
    @property
    def signed_deposit(self) -> DepositData: ...
    @property
    def deposit_datum_dict(self) -> Dict[str, bytes]: ...
    def signing_keystore(self, password: str) -> Keystore: ...
    def save_signing_keystore(self, password: str, folder: str) -> str: ...
    def verify_keystore(self, keystore_filefolder: str, password: str) -> bool: ...

class CredentialList:
    credentials: Any = ...
    def __init__(self, credentials: List[Credential]) -> None: ...
    @classmethod
    def from_mnemonic(cls: Any, mnemonic: str, mnemonic_password: str, num_keys: int, amounts: List[int], chain_setting: BaseChainSetting, start_index: int) -> CredentialList: ...
    def export_keystores(self, password: str, folder: str) -> List[str]: ...
    def export_deposit_data_json(self, folder: str) -> str: ...
    def verify_keystores(self, keystore_filefolders: List[str], password: str) -> bool: ...
